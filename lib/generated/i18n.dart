import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

//This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get add_to_saved => "Add to saved";
  String get app_title => "Find room";
  String get cancel => "Cancel";
  String get change_language => "Change language";
  String get change_language_failure => "Error when chane language";
  String get change_language_success => "Change language successfully";
  String get detail_title => "Detail";
  String get empty_rooms => "Empty rooms...";
  String get exit => "Exit";
  String get exit_app => "Exit app";
  String get forgot_password => "Forgot password?";
  String get home_page_title => "Home page";
  String get login_now => "Login now";
  String get login_title => "Login";
  String get logout => "Logout";
  String get mostViewed => "Most viewed";
  String get newest => "Newest";
  String get no => "No";
  String get no_account => "No account?";
  String get or_connect_through => "Or connect through";
  String get password => "Password";
  String get register_now => "Register now";
  String get remove_from_saved => "Remove from saved";
  String get saved_list_empty => "Saved list is empty";
  String get saved_rooms_title => "Saved rooms";
  String get see_all => "See all";
  String get settings => "Settings";
  String get settings_title => "Settings";
  String get sure_want_to_exit_app => "Are you sure you want to exit the application?";
  String get sure_want_to_logout => "Are you sure you want to logout?";
  String change_language_error(String error) => "Error when chane language: $error";
}

class $vi extends S {
  const $vi();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get register_now => "Đăng kí ngay";
  @override
  String get cancel => "Hủy";
  @override
  String get no => "Không";
  @override
  String get mostViewed => "Xem nhiều";
  @override
  String get login_now => "Đăng nhập ngay";
  @override
  String get change_language_success => "Thay đổi ngôn ngữ thành công";
  @override
  String get settings_title => "Cài đặt";
  @override
  String get password => "Mật khẩu";
  @override
  String get logout => "Đăng xuất";
  @override
  String get add_to_saved => "Thêm vào đã lưu";
  @override
  String get change_language_failure => "Lỗi khi thay đổi ngôn ngữ";
  @override
  String get login_title => "Đăng nhập";
  @override
  String get saved_list_empty => "Bạn chưa lưu nhà trọ nào";
  @override
  String get newest => "Mới nhất";
  @override
  String get settings => "Cài đặt";
  @override
  String get change_language => "Thay đổi ngôn ngữ";
  @override
  String get app_title => "Phòng trọ tốt";
  @override
  String get empty_rooms => "Chưa có nhà trọ nào...";
  @override
  String get detail_title => "Chi tiết";
  @override
  String get remove_from_saved => "Xóa khỏi đã lưu";
  @override
  String get exit => "Thoát";
  @override
  String get saved_rooms_title => "Đã lưu";
  @override
  String get or_connect_through => "hoặc kết nối qua";
  @override
  String get no_account => "Chưa có tài khoản?";
  @override
  String get home_page_title => "Trang chủ";
  @override
  String get sure_want_to_exit_app => "Bạn chắc chắn muốn thoát khỏi ứng dụng?";
  @override
  String get see_all => "Xem tất cả";
  @override
  String get exit_app => "Thoát khỏi ứng dụng";
  @override
  String get forgot_password => "Bạn quên mật khẩu?";
  @override
  String get sure_want_to_logout => "Bạn chắc chắn muốn đăng xuất?";
  @override
  String change_language_error(String error) => "Lỗi khi thay đổi ngôn ngữ: $error";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("vi", ""),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported);
    };
  }

  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported) {
    if (locale == null || !isSupported(locale)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "vi":
          return SynchronousFuture<S>(const $vi());
        case "en":
          return SynchronousFuture<S>(const $en());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) =>
    locale != null && supportedLocales.contains(locale);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
